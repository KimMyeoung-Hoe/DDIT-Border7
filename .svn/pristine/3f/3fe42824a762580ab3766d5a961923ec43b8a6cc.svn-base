<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
<%@ taglib uri="jakarta.tags.fmt" prefix="fmt" %>
<%@ taglib uri="jakarta.tags.core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<title>마이페이지</title>
	<!-- 공통css -->
	<%@ include file="../modules/header.jsp" %>
	<%@ include file="../modules/sidebar.jsp" %>
	<%@ include file="../modules/modal.jsp" %>
	<link rel="stylesheet" href="/css/main.css" />
	<!-- CK에디터 -->
	<script src="/resources/ckeditor/ckeditor.js"></script>
	<!-- confirm 대체 -->
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jquery-confirm/3.3.4/jquery-confirm.min.css">
	<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-confirm/3.3.4/jquery-confirm.min.js"></script>
	<style>
		/* 상단 버튼 영역 */
        .btn-div { /* 전체 상단 버튼 영역 */
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0px 10px 15px 10px;
            color: white;
        }
        .btn-div .btn { /* 전체 버튼 */
            min-width: 90px;
            max-width: 90px;
            padding: 5px;
        }
        .btn-div .left-buttons .btn { /* 좌측 버튼(템플릿 선택) */
        	min-width: 185px;
            max-width: 185px;
        }

        /* 메일 전체 영역 */
        .mail-main-content {
            display: flex;
            min-height: 650px;
        }
        
        /* 메일 사이드바 영역 */
        .mail-sidebar { /* 전체 메일 사이드바 영역 */
            min-width: 200px;
            padding: 20px 10px;
            border-right: 1px solid #eee;
            background-color: #f2f4fa;
        	border-bottom-left-radius: 12px;   
        	border-top-left-radius: 12px;   
        }
        .mail-sidebar .labels label { /* 안읽음, 중요, 첨부파일 */
        	align-items: center;
        	text-align: center;
        	margin: 0px 4px;
        	font-size: 14px;
        }
        .mail-sidebar ul { /* 메일함 목록 ul */
            list-style: none;
            padding: 0;
            margin: 20px 0px;
            display:inline-block;
            align-content: flex-start;
            width: 100%;
            position: relative;
        }
        .mail-sidebar ul li { /* 메일함 목록 li */
            padding: 5px;
            cursor: pointer;
            display: flex;
        }
        .mail-sidebar ul li:hover,
        .mail-sidebar ul li.active { /* 마우스를 올린, 혹은 현재 선택된 메일함 */
            font-weight: bold;
            color: #0d6efd;
        }
        .mail-sidebar ul li span.count { /* 메일함의 메일개수 표기 */
        	margin-right: 0px;
            font-size: 12px;
            color: #888;
            margin-top: 2px;
			position: absolute;
			right: 1px;
        }
        
        /* 메일 영역 */
        .mail-list-div { /* 메일 전체 영역 */
            display: flex;
            border-right: 1px solid #eee;
            border-bottom: 1px solid #eee;
            width: 100%;
            flex-direction: column;
            border-top-right-radius: 14px;
            border-bottom-right-radius: 14px;
        }
        .mail-list-controls { /* 메일 관리 버튼 전체 영역 */
            align-items: center;
            padding: 10px 15px;
            background-color: #3a3a50;
            border-bottom: 1px solid #eee;
            display: flex;
            width: 100%;
            box-sizing: border-box;
            border-top-right-radius: 14px;
            height: 50px;
            position: relative;
            margin-bottom: 10px;
        }
        .mail-list-controls .mail-list-controls-btn-div  { /* 메일 관리 버튼 내부 영역 */
        	position: absolute;
        	right: 5px;
        }
        .mail-list-controls-btn-div .btn { /* 메일 관리 버튼 */
        	background-color: #e0e0e0;
        	padding: 0px;
        	width: 90px;
        	height: 25px;
        	margin-right: 5px;
        }
        .mail-list-controls-btn-div span { /* 메일 관리 버튼 옆 임시저장일자 */
        	padding: 0px;
        	width: 150px;
        	height: 25px;
        	margin-right: 5px;
        	color: white;
        }
        .mail-table { /* 메일 작성 테이블 */
        	width: 100%;
        	padding: 10px 10px;
        }
        .td-t { /* 메일 작성 테이블 항목명 - 수신자, 첨부파일 */
        	min-width: 120px;
        	width: 120px;
        	padding: 0px 10px 0px 30px;
        }
        .form-control { /* 수신자 input */
        	border: 0px;
        	width: 100%;
        	height: 18px;
        }
        .td-title { /* 메일 작성 테이블 - 메일 제목 */
        	width: 100%;
			padding: 10px 20px 0px 20px;
        }
        .td-title .form-control {
        	font-size: 25px;
        	height: 38px;
        	border-top: 1px solid #eee;
        }
        .td-b { /* 메일 작성 테이블 입력항목 */
        	width: 100%;
        	padding: 0px;
        }
        .td-main { /* 메일 작성 textarea가 위치한 td */
        	padding: 10px;
        }
        .td-f {	/* 첨부한 파일 목록이 출력되는 td */
        	padding: 10px 50px;
        } 
        
        /* 메일 수신자 입력란 */
        .recipient-tags { /* 전체 메일 수신자 영역 */
		    display: flex; /* 태그들을 한 줄로 정렬 */
		    flex-wrap: wrap; /* 내용이 넘치면 다음 줄로 */
		    gap: 5px; /* 태그들 사이의 간격 */
		    border: 1px solid #ccc;
		    padding: 5px;
		    min-height: 38px; /* 입력 필드 높이와 맞추기 */
		    align-items: center;
		}
		.recipient-tag { /* 각각 메일 수신자 */
		    background-color: #e0e0e0;
		    border: 1px solid #c0c0c0;
		    border-radius: 4px;
		    padding: 4px 8px;
		    font-size: 14px;
		    display: flex;
		    align-items: center;
		    white-space: nowrap; /* 줄바꿈 방지 */
		}
		.recipient-tag .email-text {
		    margin-right: 5px;
		}
		.recipient-tag .remove-btn {
		    background: none;
		    border: none;
		    color: #888;
		    cursor: pointer;
		    font-size: 16px;
		    line-height: 1;
		    padding: 0;
		    margin-left: 5px;
		}
		.recipient-tag .remove-btn:hover {
		    color: #333;
		}
		.recipient-tag.invalid { /* 유효하지 않은 이메일 주소 */
		    background-color: #ffe0e0;
		    border-color: #ff9999;
		}

        .fileBtn { /* 파일 첨부하기 버튼 */
        	background-color: #e0e0e0;
        	padding: 0px;
        	width: 120px;
        	height: 25px;
        	margin-right: 5px;
        }
		#fileListContainer { /* 첨부파일 목록 */
		    list-style: none;
		    padding: 0;
		    margin: 3px 0; 
		    text-align: left;
		    display: block !important;
		}
        .file-delete-btn { /* 개별 파일 삭제 버튼 */
        	background: none;
		    border: none;
		    font-size: 24px;
		    padding: 0px 5px;
        }
		#fileListContainer .attached-file-item { /* 개별 파일 항목 */
		    display: flex;
		    align-items: center;
		    justify-content: space-between;
		    padding: 0px 5px;
		    border-bottom: 1px dashed #eee;
		    font-size: 14px;
		    color: #555;
		    display: block !important;
		    width: 100% !important;
		    box-sizing: border-box;
		}
		.attached-file-item:last-child {
		    border-bottom: none; /* 마지막 항목은 구분선 없음 */
		}
		.attached-file-item span {
		    margin-right: 5px;
		}
    </style>
	<%
        // 세션 로그인 값
        String userId = (String)session.getAttribute("userId");
		String authCode = (String)session.getAttribute("auth");
		
		// 현재 경로
		String contextPath = request.getContextPath();
	%>
</head>
<body>
	<div class="app-container">
		<main class="main-content-area">

			<!-- 헤더 영역 -->
			<div class="content-header">
				<!-- 브레드크럼 엘리먼트 -->
				<div class="breadcrumb-warp">
					<div class="col-sm-12">
						<ol class="breadcrumb">
							<li class="breadcrumb-item"><a href="/">Home</a></li>
							<li class="breadcrumb-item"><a href="myMail.do">내 메일</a></li>
							<li class="breadcrumb-item">메일 작성</li>
						</ol>
					</div>
				</div>
				<div id="contentTitle" class="content-title">메일 작성</div>
				<p id="contentDesc" class="desc">메일을 작성하여 내부 메일을 발송합니다.</p>
			</div>

			<!--  본문 영역 시작 -->
			<div class="section">
				<!-- 상단 버튼 영역 -->
				<div class="btn-div">
					<div class="left-buttons">
<!-- 						<button type="button" class="btn btn-primary">템플릿 선택</button> -->
					</div>
					<div class="right-buttons">
						<button type="button" class="btn btn-secondary" id="editReset">작성 취소</button>
						<button type="button" class="btn btn-primary" id="sendBtn">보내기</button>
					</div>
				</div>

				<!-- 메일 전체 영역 -->
				<div class="mail-main-content">
					<!-- 메일 사이드바 -->
					<div class="mail-sidebar">
						<div class="labels">
							<label>${myMailVO.unreadCount }<br/>안읽음</label>
							<label>☆<br/>중요</label>
							<label>ㅁ<br/>첨부파일</label>
		            	</div>
		                <ul class="categorys">
							<li class="category category-all" id="category-all" data-category="all">
								전체 메일함
								<span class="count">${myMailVO.allCount }</span>
							</li>
							<li class="category category-recip" id="category-recip" data-category="recip">
								받은 메일함
								<span class="count">${myMailVO.recipCount }</span>
		                    </li>
							<li class="category category-send" id="category-send" data-category="send">
		                    	보낸 메일함
								<span class="count">${myMailVO.sendCount }</span>
							</li>
							<li class="category category-temp" id="category-temp" data-category="temp">
								임시 보관함
								<span class="count" id="tempCount">${myMailVO.tempCount }</span>
							</li>
							<li class="category category-trash" id="category-trash" data-category="trash">
		                    	휴지통
								<span class="count">${myMailVO.trashCount }</span>
							</li>
						</ul>
					</div>

					<!-- 메일 영역 -->
					<div class="mail-list-div">
						<!-- 메일 관리 영역 -->
						<div class="mail-list-controls">
							<div class="mail-list-controls-btn-div">
								<span id="draftTime"></span>
								<input type="hidden" name="emailNo" id="hiddenEmailNo">
								<input type="hidden" name="saveDate" id="hiddenSaveDate">
								<button type="button" class="btn" id="tempSaveBtn">임시저장</button>
<!-- 								<button type="button" class="btn" id="tSaveBtn">템플릿저장</button> -->
							</div>
						</div>
						
						<div class="mail-div">
							<table class="mail-table">
								<tr>
									<td class="td-t">
										받는 사람
									</td>
									<td class="td-b recipient-input-container">
										<input type="hidden" name="recipients" id="hiddenRecipients">
										<input type="text" class="form-control" id="emailRecips" placeholder="쉼표(,)로 구분하여 동시에 여러 주소로 발송할 수 있습니다." value="${emailData.recipEmails }" />
									</td>
								</tr>
								<tr>
									<td class="td-t">
									</td>
									<td class="td-b recipient-input-container">
										<div id="recipientTags" class="recipient-tags"></div>
									</td>
								</tr>
								<tr>
									<td colspan="2" class="td-title">
										<input type="text" class="form-control" id="emailTitle" placeholder="메일 제목" value="${emailData.emailTitle }" />
									</td>
								</tr>
								<tr>
									<td colspan="2" class="td-main">
										<textarea id="emailContent" name="content">${emailData.emailContent }</textarea>
									</td>
								</tr>
								<tr class="tr-display">
									<td class="td-t">
										첨부파일
									</td>
									<td class="td-b">
										<button type="button" id="fileBtn" class="fileBtn btn">파일 가져오기</button>
										<input type="file" id="emailFile" name="emailFile" style="display: none;" multiple />
									</td>
								</tr>
								<tr>
									<td colspan="2" class="td-f" id="comFileNo" data-comfileno="${comFileNo }">
										<ul id="fileListContainer">
										</ul>
									</td>
								</tr>
							</table>
		            	</div>
		            </div>
		            <!-- 메일 영역 끝 -->
		        </div>
		        <!-- 메일 전체 영역 끝 -->
			</div>
			<!-- 본문 영역 끝 -->
		</main>
	</div>	
</body>
	<script type="text/javascript">
		$(document).ready(function () {
			// CK에디터 적용
			CKEDITOR.replace("content");

			// 기본 URL
			let baseUrl = "/myPage/myMail.do";
			let searchCategory = "";
			
			// 변수 미리 선언
			let emailTempName = "";		// 템플릿 이름
			let file = null;
			let formData = new FormData();
			let reader = new FileReader();
			
			// 메일수신자 처리 -----------------------------------------------------------------------
			let $emailRecips = $("#emailRecips");
			let $recipientTagsContainer = $("#recipientTags");
			let $hiddenRecipientsInput = $('#hiddenRecipients');
			let recipientsSet  = new Set();
			
			// 초기 설정
			const tempEmailRecips = $emailRecips.val();
		    if (tempEmailRecips) {
		        const emails = tempEmailRecips.split(',')
		                                             .map(e => $.trim(e))
		                                             .filter(e => e !== '');
		        emails.forEach(email => addRecipientTag(email));
		        $emailRecips.val('');
		    }
		    
		    // 임시저장한 후의 메일이라면
		    $('#hiddenEmailNo').val(${emailData.emailNo });
			
			// 이메일 유효성 검사 함수
		    function isValidEmail(email) {
		        return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
		    }
			
		 	// 이메일 태그 생성 및 추가 함수
		    function addRecipientTag(email) {
		        email = $.trim(email); // 앞뒤 공백 제거
		        if (!email || recipientsSet.has(email)) {
		            return; // 빈 문자열이거나 이미 존재하는 이메일이면 추가하지 않음
		        }

		        recipientsSet.add(email); // Set에 이메일 추가

		        const $tag = $('<span>').addClass('recipient-tag').attr('data-email', email);
		        
		        if (!isValidEmail(email)) {
		            $tag.addClass('invalid'); // 유효하지 않으면 invalid 클래스 추가
		        }

		        $('<span>').addClass('email-text').text(email).appendTo($tag);

		        const $removeBtn = $('<button>').addClass('remove-btn').text('x');
		        $removeBtn.on('click', function() {
		            $tag.remove(); // 태그 제거
		            recipientsSet.delete(email); // Set에서도 제거
		            updateHiddenInput(); // 숨겨진 input 값 업데이트
		        });
		        $tag.append($removeBtn);

		        $recipientTagsContainer.append($tag);
		        updateHiddenInput(); // 숨겨진 input 값 업데이트
		    }

		    // 숨겨진 input에 현재 수신자 목록을 쉼표 구분 문자열로 업데이트하는 함수
		    function updateHiddenInput() {
		        $hiddenRecipientsInput.val(Array.from(recipientsSet).join(','));
		    }

		    // 입력 필드에서 키 입력 이벤트 처리
		    $emailRecips.on('keydown', function(event) {
		        if (event.key === ',' || event.key === 'Enter') {
		            event.preventDefault(); // 쉼표나 Enter 키의 기본 동작 방지

		            const inputValue = $emailRecips.val();
		            if (inputValue) {
		                // 쉼표로 분리하고 각 이메일 주소의 앞뒤 공백 제거 및 빈 문자열 필터링
		                const emails = inputValue.split(',')
		                                         .map(e => $.trim(e))
		                                         .filter(e => e !== '');
		                emails.forEach(email => addRecipientTag(email));
		                $emailRecips.val(''); // 입력 필드 초기화
		            }
		        }
		    });
		    
			// 첨부파일 처리 ----------------------------------------------------------------------
			// 파일 가져오기 버튼 클릭 시 display:none 상태인 file input 클릭 이벤트를 발생시킨다.
			$('#fileBtn').on('click', function () {
				$('#emailFile').click();
			});
		    
			let attachedFiles = []; // 선택된 파일을 담을 배열
			
			$('#emailFile').on('change', function() {
		        const files = this.files; // 선택된 파일들
		        
		        if (files.length > 0) {
		            const $fileListContainer = $('#fileListContainer'); // 파일 목록을 추가할 ul 태그

		            for (let i = 0; i < files.length; i++) {
		                const file = files[i];
		                const fileName = file.name;
		                //const fileType = file.type.split('/')[1] || 'unknown'; // 파일 형식 (예: jpeg, pdf)
		                const fileSize = (file.size / 1024).toFixed(2); // 파일 크기 (KB 단위, 소수점 두 자리)

		                // 배열에 파일 추가
		                attachedFiles.push(file);

		                // 파일 정보를 담을 li 요소 생성
		                const $listItem = $('<li></li>').addClass('attached-file-item');
		                // 파일 삭제 처리를 위해 현재 파일의 인덱스 값 저장
		                $listItem.attr('data-file-index', attachedFiles.length - 1);
		                
		             	// 삭제 버튼 추가
		                const $deleteButton = $('<button type="button" class="file-delete-btn">×</button>');
		                $deleteButton.on('click', function() {
		                    xToDelete = $(this).closest('li').data('file-index');

		                    // 배열에서 해당 인덱스의 파일 제거
		                    // splice(인덱스, 제거할 개수)
		                    attachedFiles.splice(indexToDelete, 1);

		                    $(this).closest('li').remove();

		                    // 배열에서 요소가 제거되었으므로, 나머지 DOM 요소들의 data-file-index를 업데이트
		                    $('#fileListContainer .attached-file-item').each(function(idx) {
		                        $(this).attr('data-file-index', idx);
		                    });
		                });
		                $listItem.append($deleteButton);
		                
		                // 파일 정보 텍스트 추가
		                $listItem.append("<span>" + fileName + "</span> - <span>" + fileSize +"KB</span>");

		                // ul 컨테이너에 li 추가
		                $fileListContainer.append($listItem);
		            }
		        }
		        $(this).val('');
			});
		    
			// 템플릿(불러오기) 버튼 이벤트 -----------------------------------------------------------------------
			
			// (메일)보내기 버튼 이벤트 -----------------------------------------------------------------------
			$("#sendBtn").on("click", function() {
				// 작성된 메일 내용을 담는 함수
				let emailDataObj = fn_mailAll();
				
				// 받는 사람, 제목, 본문 미입력 확인
				if($hiddenRecipientsInput.val() == null || $hiddenRecipientsInput.val() == "") {
					$.confirm({
						title: '받는 사람 미입력',
						content: '받는 사람을 입력해주세요.',
						buttons: {
							"확인": function() {}
						}
					});
					return false;
				}
				if($("#emailTitle").val() == null || $("#emailTitle").val() == "") {
					$.confirm({
						title: '제목 미입력',
						content: '제목을 입력해주세요.',
						buttons: {
							"확인": function() {}
						}
					});
					return false;
				}
				if(CKEDITOR.instances.emailContent.getData() == null || CKEDITOR.instances.emailContent.getData() == "") {
					$.confirm({
						title: '본문 미입력',
						content: '본문을 입력해주세요.',
						buttons: {
							"확인": function() {}
						}
					});
					return false;
				}
				
				// file 처리를 위해 FormData 처리
				let formData = new FormData();
				formData.append('emailData', new Blob([JSON.stringify(emailDataObj)], { type: 'application/json' }));

			    // 파일 담기
			    if (attachedFiles.length > 0) { // attachedFiles가 비어있지 않은지 확인
			        attachedFiles.forEach((file, index) => {
			            formData.append('files', file, file.name); // 'files'라는 이름으로 각 파일 추가
			        });
			    }

			    $.ajax({
			        url: "/myPage/mailSend",
			        method: "POST",
			        data: formData,
			        contentType: false, // multipart/form-data를 위해 false로 설정
			        processData: false, // jQuery가 데이터를 쿼리 문자열로 변환하지 않도록 false로 설정
			        success : function(response) {
			            console.log('메일 발송 성공 :', response);
			            console.log('상태 : ', response.status);
			            console.log('메시지 : ', response.message);
			            window.location.href = "myMail.do"
			        },
			        error : function(error, status, thrown) {
			            console.log("error : ", error);
			        }
			    });
			});
			
			// 임시저장(전체 내용 저장) 버튼 이벤트 -----------------------------------------------------------------------
			$("#tempSaveBtn").on("click", function() {
				// 작성된 메일 내용을 담는 함수
				// 작성된 메일 내용을 담는 함수
				let emailDataObj = fn_mailAll();
				// file 처리를 위해 FormData 처리
				let formData = new FormData();
				formData.append('emailData', new Blob([JSON.stringify(emailDataObj)], { type: 'application/json' }));

			    // 파일 담기
			    if (attachedFiles.length > 0) { // attachedFiles가 비어있지 않은지 확인
			        attachedFiles.forEach((file, index) => {
			            formData.append('files', file, file.name); // 'files'라는 이름으로 각 파일 추가
			        });
			    }

			    $.ajax({
			        url: "/myPage/mailTempSave",
			        method: "POST",
			        data: formData,
			        contentType: false, // multipart/form-data를 위해 false로 설정
			        processData: false, // jQuery가 데이터를 쿼리 문자열로 변환하지 않도록 false로 설정
			        success : function(response) {
			            console.log('메일 임시저장 성공 :', response);
			            console.log('상태 : ', response.status);
			            console.log('메시지 : ', response.message);
			            if (response.emailNo) {
                            console.log('EMAILS - emailNo : ', response.emailNo);
                        }
                        $("#hiddenEmailNo").val(response.emailNo);
                        $("#hiddenSaveDate").val(response.emailDate);
                        console.log('emailNo : ', response.emailNo);
                        console.log('emailDate : ', response.emailDate);
                        $("#draftTime").text(response.emailDate + " 저장됨");
                        $("#tempCount").text(response.myMailVO.tempCount);
                        $('#comFileNo').data('comfileno', response.comFileNo);
                        consoel.log(response.comFileNo);
			        },
			        error : function(error, status, thrown) {
			            console.log("error : ", error);
			        }
			    });
			});
			
			// 템플릿저장(제목과 본문 저장) 버튼 이벤트 -----------------------------------------------------------------------
			$("#tSaveBtn").on("click", function() {
				// 템플릿 이름을 입력받는다.
				emailTempName = prompt("현재 작성한 메일의 제목과 본문 내용을 템플릿으로 저장합니다. 저장할 템플릿의 이름을 입력해주세요.");
				
				// 취소를 누르지 않고 확인을 누르면 템플릿 저장을 진행한다.
				if(emailTempName != null) {
					let emailData = {
						"emailTempName"		: emailTempName,
						"emailTitle"		: $("#emailTitle").val(),
						"emailContent"		: CKEDITOR.instances.emailContent.getData()
					}
					
					$.ajax({
						url: "/myPage/mailTInsert",
						method: "POST",
						data: JSON.stringify(emailData),
		                contentType: 'application/json',
	                    success : function(result) {
							if(result != null && result != "") {
								$.confirm({
									title: '템플릿 저장',
									content: '템플릿이 정상적으로 저장되었습니다.',
									buttons: {
										"확인": function() {}
									}
								});
							}
						},
						error : function(error, status, thrown) {
							console.log("error : {}", error);
							$.confirm({
								title: '템플릿 저장',
								content: '템플릿 저장중 오류가 발생했습니다.',
								buttons: {
									"확인": function() {}
								}
							});
						}
					});
				}
			});
			
			// 작성 취소 버튼 이벤트 -----------------------------------------------------------------------
			$('#editReset').on('click', function() {
				$.confirm({
					title: '메일 작성 취소',
					content: '작성 취소 시 작성한 내용이 모두 사라집니다.<br/>정말로 취소하시겠습니까?',
					buttons: {
						"네": function() {
							window.location.href = "myMail.do"
						},
						"아니요": function() {}
					}
				});
			});
			// 메일함 클릭 -----------------------------------------------------------------------
			$('.labels').on('click', function() {
				$.confirm({
					title: '메일 작성 취소',
					content: '다른 화면으로 이동 시 작성한 내용이 모두 사라집니다.<br/>정말로 취소하시겠습니까?',
					buttons: {
						"네": function() {
							window.location.href = "myMail.do"
						},
						"아니요": function() {}
					}
				});
			});
			// 메일함 클릭 -----------------------------------------------------------------------
			$('.category').on('click', function() {
				searchCategory = $(this).data("category");
				$.confirm({
					title: '메일 작성 취소',
					content: '다른 화면으로 이동 시 작성한 내용이 모두 사라집니다.<br/>정말로 취소하시겠습니까?',
					buttons: {
						"네": function() {
							window.location.href = baseUrl + "?searchCategory=" + encodeURIComponent(searchCategory);
						},
						"아니요": function() {}
					}
				});
			});
			
			// 함수 -----------------------------------------------------------------------
			// 메일 작성내용 초기화
			function fn_mailReset() {
				$('#emailRecips').val("");
				$('#hiddenRecipients').val("");
				$('#emailTitle').val("");
				CKEDITOR.instances.emailContent.setData("");
				$('#hiddenFileInput').val("");
			}
			
			// 화면 작성내용 모두 담기
			function fn_mailAll() {
				// hidden input에 담은 최종 수신자 목록
			    // 혹시라도 아직 입력창에 남아있는 값 처리
			    let inputValue = $emailRecips.val();
			    if (inputValue) {
		            inputValue.split(',')
		                      .map(e => $.trim(e))
		                      .filter(e => e !== '')
		                      .forEach(email => addRecipientTag(email)); // 이메일 추가 및 Set 업데이트
		        }
		        updateHiddenInput();
		        let hiddenRecipients = $('#hiddenRecipients').val();
				
				let emailData = {
					"emailNo"			: $('#hiddenEmailNo').val(),
					"emailTitle"		: $("#emailTitle").val(),
					"emailContent"		: CKEDITOR.instances.emailContent.getData(),
					"userId"			: "<%=userId %>",
					"emailSender"		: "<%=userId %>" + "@border7.kr",
					"recipEmails"		: hiddenRecipients,
					"emailTempName"		: emailTempName,
					"comFileNo"			: $('#comFileNo').data('comfileno')
				}
				return emailData;
			}
			
		});
	</script>
</html>